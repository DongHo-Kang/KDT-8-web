package Java_Interface;

public class Other {

	//추상클래스와 인터페이스 차이점
	/*
	  1. 상속
	  추상 클래스: 한 클래스는 하나의 추상클래스만 상속
	  인터페이스: 한 클래스는 여러 인터페이스를 구현 가능
	  
	  2. 멤버변수
	  추상 클래스: 멤버변수를 가질 수 있다.
	  인터페이스: 상수만 포함가능
	  
	  3. 구성요소
	  추상클래스: 추상메소드, 생성자, 변수
	  인터페이스: 추상메소드, 상수, 디폴트 메소드
	  
	  4. 사용
	  추상클래스: 상속 관계에서 공통의 기능이나 상태를 유지할 때 사용
	  인터페이스: 여러 클래스에서 공통으로 필요한 기능을 정의할 때 사용
	  
	  5. 생성자
	  추상클래스: 생성자와 초기화 가능
	  인터페이스: 생성자와 초기화 불가능
	 */
	
	//공통점
	//하위클래스에서 특정한 행동을 강제하기 위해 사용

	/*
	  다형성
	  하나의 인터페이스나 클래스를 여러 가지 방식으로 동작하게 하는 것
	  상속과 인터페이스를 활용하여 구현
	  다형성의 장점
	  	1. 재사용성: 기존 코드를 재사용하여 새로운 클래스 생성
	  	2. 확장성: 기존 코드를 수정하지 않고 기능 추가 및 확장
	  다형성의 단점
	  	1. 복잡성 증가: 여러 객체가 동일한 인터페이스나 슈퍼클래스를 상속받을 때, 실제 어떤 객체의 메소드가 
	  				호출되는지 파악하기 어려울 수 있음.
	  	2. 디버깅 어려움: 여러 클래스가 동일한 메소드를 오버라이드 할 경우, 디버깅 시 실제로 어떤 클래스의 메소드가 
	  				실행되는지 파악하기 어려울 수 있음.
	  	3. 유지보수의 어려움: 다형성을 과도하게 사용하게 되면 새로운 클래스나 메소드가 추가 될 때 유지보수가 어려워질 수 있음.
	  	
	*/
	
}
